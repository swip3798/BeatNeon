[gd_resource type="VisualShader" load_steps=22 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 1

[sub_resource type="VisualShaderNodeDotProduct" id=11]

[sub_resource type="VisualShaderNodeVectorLen" id=12]

[sub_resource type="VisualShaderNodeVectorLen" id=13]

[sub_resource type="VisualShaderNodeScalarOp" id=14]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=15]
operator = 3

[sub_resource type="VisualShaderNodeVec3Constant" id=16]
constant = Vector3( -0.5, 0, 0 )

[sub_resource type="VisualShaderNodeScalarOp" id=17]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=18]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=1]
function = 5

[sub_resource type="VisualShaderNodeVec3Constant" id=19]
constant = Vector3( 0.3, 0.3, 0 )

[sub_resource type="VisualShaderNodeScalarOp" id=20]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 7

[sub_resource type="VisualShaderNodeScalarFunc" id=21]
function = 14

[sub_resource type="VisualShaderNodeScalarOp" id=22]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorCompose" id=4]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeVectorOp" id=5]
default_input_values = [ 0, Vector3( 0.5, 0.5, 0 ), 1, Vector3( 0, 0, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorLen" id=6]

[sub_resource type="VisualShaderNodeVec3Constant" id=7]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeVectorLen" id=8]

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Vector:17
	vec3 n_out17p0;
	n_out17p0 = vec3(-0.500000,0.000000,0.000000);

// Input:3
	vec3 n_out3p0;
	n_out3p0 = vec3(UV,0.0);

// Vector:8
	vec3 n_out8p0;
	n_out8p0 = vec3(0.500000,0.500000,0.000000);

// VectorOp:11
	vec3 n_out11p0;
	n_out11p0 = n_out3p0 - n_out8p0;

// DotProduct:12
	float n_out12p0;
	n_out12p0 = dot( n_out17p0 , n_out11p0 );

// VectorLen:13
	float n_out13p0;
	n_out13p0 = length( n_out17p0 );

// VectorLen:14
	float n_out14p0;
	n_out14p0 = length( n_out11p0 );

// ScalarOp:15
	float n_out15p0;
	n_out15p0 = n_out13p0 * n_out14p0;

// ScalarOp:16
	float n_out16p0;
	n_out16p0 = n_out12p0 / n_out15p0;

// ScalarOp:18
	float n_in18p1 = 1.00000;
	float n_out18p0;
	n_out18p0 = n_out16p0 - n_in18p1;

// ScalarOp:19
	float n_in19p1 = 0.50000;
	float n_out19p0;
	n_out19p0 = n_out18p0 * n_in19p1;

// VectorOp:6
	vec3 n_in6p0 = vec3(0.50000,0.50000,0.00000);
	vec3 n_out6p0;
	n_out6p0 = n_in6p0 - n_out3p0;

// VectorLen:7
	float n_out7p0;
	n_out7p0 = length( n_out6p0 );

// Vector:20
	vec3 n_out20p0;
	n_out20p0 = vec3(0.300000,0.300000,0.000000);

// VectorLen:9
	float n_out9p0;
	n_out9p0 = length( n_out20p0 );

// ScalarOp:10
	float n_out10p0;
	n_out10p0 = n_out7p0 / n_out9p0;

// ScalarOp:21
	float n_in21p0 = 1.00000;
	float n_out21p0;
	n_out21p0 = min( n_in21p0 , n_out10p0 );

// VectorCompose:5
	float n_in5p2 = 1.00000;
	vec3 n_out5p0;
	n_out5p0 = vec3( n_out19p0 , n_out21p0 , n_in5p2 );

// VectorFunc:2
	vec3 n_out2p0;
	{
		vec3 c = n_out5p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out2p0=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// ScalarFunc:22
	float n_out22p0;
	n_out22p0 = floor(n_out21p0);

// ScalarOp:23
	float n_in23p0 = 1.00000;
	float n_out23p0;
	n_out23p0 = n_in23p0 - n_out22p0;

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out23p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -190, -27 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1000, 160 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 720, 140 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -880, 240 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 440, 140 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -100, 320 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 100, 320 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -880, 360 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( -20, 460 )
nodes/fragment/10/node = SubResource( 9 )
nodes/fragment/10/position = Vector2( 260, 360 )
nodes/fragment/11/node = SubResource( 10 )
nodes/fragment/11/position = Vector2( -560, 80 )
nodes/fragment/12/node = SubResource( 11 )
nodes/fragment/12/position = Vector2( -260, -240 )
nodes/fragment/13/node = SubResource( 12 )
nodes/fragment/13/position = Vector2( -240, -60 )
nodes/fragment/14/node = SubResource( 13 )
nodes/fragment/14/position = Vector2( -240, 0 )
nodes/fragment/15/node = SubResource( 14 )
nodes/fragment/15/position = Vector2( -20, -40 )
nodes/fragment/16/node = SubResource( 15 )
nodes/fragment/16/position = Vector2( 200, -100 )
nodes/fragment/17/node = SubResource( 16 )
nodes/fragment/17/position = Vector2( -560, -80 )
nodes/fragment/18/node = SubResource( 17 )
nodes/fragment/18/position = Vector2( 20, 120 )
nodes/fragment/19/node = SubResource( 18 )
nodes/fragment/19/position = Vector2( 200, 120 )
nodes/fragment/20/node = SubResource( 19 )
nodes/fragment/20/position = Vector2( -320, 440 )
nodes/fragment/21/node = SubResource( 20 )
nodes/fragment/21/position = Vector2( 440, 320 )
nodes/fragment/22/node = SubResource( 21 )
nodes/fragment/22/position = Vector2( 620, 360 )
nodes/fragment/23/node = SubResource( 22 )
nodes/fragment/23/position = Vector2( 820, 320 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 5, 0, 2, 0, 3, 0, 6, 1, 6, 0, 7, 0, 7, 0, 10, 0, 9, 0, 10, 1, 3, 0, 11, 0, 8, 0, 11, 1, 13, 0, 15, 0, 14, 0, 15, 1, 15, 0, 16, 1, 12, 0, 16, 0, 11, 0, 14, 0, 17, 0, 13, 0, 17, 0, 12, 0, 11, 0, 12, 1, 16, 0, 18, 0, 18, 0, 19, 0, 19, 0, 5, 0, 20, 0, 9, 0, 10, 0, 21, 1, 21, 0, 5, 1, 21, 0, 22, 0, 22, 0, 23, 1, 23, 0, 0, 1 )
