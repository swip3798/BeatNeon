[gd_resource type="VisualShader" load_steps=5 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=2]

[sub_resource type="VisualShaderNodeVectorCompose" id=3]
default_input_values = [ 0, 1.0, 1, 0.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeVectorFunc" id=4]
function = 5

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// VectorDecompose:3
	float n_out3p0;
	float n_out3p1;
	float n_out3p2;
	n_out3p0 = n_out2p0.x;
	n_out3p1 = n_out2p0.y;
	n_out3p2 = n_out2p0.z;

// VectorCompose:4
	float n_in4p0 = 1.00000;
	float n_in4p1 = 0.00000;
	vec3 n_out4p0;
	n_out4p0 = vec3( n_in4p0 , n_in4p1 , n_out3p0 );

// VectorFunc:5
	vec3 n_out5p0;
	{
		vec3 c = n_out4p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out5p0=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	COLOR.rgb = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -279, 126 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 640, 240 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -220, 240 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -60, 240 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 200, 220 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 400, 220 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 2, 4, 0, 5, 0, 5, 0, 0, 0 )
